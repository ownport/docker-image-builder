from __future__ import (absolute_import, division, print_function)

import textwrap
from builder.utils import facts


def test_parse_resolve():
    output = textwrap.dedent('''
    # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
    #     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
    domain example.com
    
    nameserver 8.8.8.8
    nameserver 8.8.4.4
    
    search example.com local.lan
    options timeout:1
    ''')
    result = facts.parse_resolv(output)
    assert result[u'nameservers'] == ['8.8.8.8', '8.8.4.4']
    assert result[u'search'] == ['example.com', 'local.lan']
    assert result[u'options'] == ['timeout:1']
    assert result[u'domain'] == 'example.com'


def test_parse_ifconfig():
    output = textwrap.dedent('''
    eth0      Link encap:Ethernet  HWaddr 02:43:AD:12:01:05
              inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
              UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
              RX packets:3 errors:0 dropped:0 overruns:0 frame:0
              TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
              collisions:0 txqueuelen:0
              RX bytes:258 (258.0 B)  TX bytes:0 (0.0 B)
    
    lo        Link encap:Local Loopback
              inet addr:127.0.0.1  Mask:255.0.0.0
              UP LOOPBACK RUNNING  MTU:65536  Metric:1
              RX packets:0 errors:0 dropped:0 overruns:0 frame:0
              TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
              collisions:0 txqueuelen:1
              RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ''')
    result = facts.parse_ifconfig(output)
    assert result == {
        'eth0': {
            'hwaddr': '02:43:AD:12:01:05',
            'inet': [{'address': '172.17.0.2', 'broadcast': '0.0.0.0', 'netmask': '255.255.0.0'}],
            'up': False},
        'lo': {
            'inet': [{'address': '127.0.0.1', 'netmask': '255.0.0.0'}],
            'up': False}
    }
